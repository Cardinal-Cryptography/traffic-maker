name: Build artifacts

on:
  pull_request:
  workflow_dispatch:
    inputs:
      deploy:
        description: Whether to perform deployment step
        required: false
        type: boolean
  push:
    branches: [ main ]

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build-backend:
    name: Build and upload backend
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      SCCACHE_VERSION: 0.2.13
      SCCACHE_CACHE_SIZE: 2G
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          override: true

      - name: Install WASM target
        run: rustup target add wasm32-unknown-unknown

      - name: Restore cargo cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo
            !~/.cargo/registry/src
            target/
          key: ${{ runner.os }}-cargo-v2-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-v2

      - name: Install sccache for ubuntu-latest
        run: |
          LINK=https://github.com/mozilla/sccache/releases/download
          SCCACHE_FILE=sccache-$SCCACHE_VERSION-x86_64-unknown-linux-musl

          mkdir -p $HOME/.local/bin
          curl -L "$LINK/$SCCACHE_VERSION/$SCCACHE_FILE.tar.gz" | tar xz
          mv -f $SCCACHE_FILE/sccache $HOME/.local/bin/sccache

          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Restore sccache
        uses: actions/cache@v2
        with:
          path: /home/runner/.cache/sccache
          key: ${{ runner.os }}-sccache-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-sccache

      - name: Install cargo-cache
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-cache

      - name: Start sccache server
        run: sccache --start-server

      - name: Build backend
        run: cargo build --release

      - name: Upload backend
        uses: actions/upload-artifact@v2
        with:
          name: backend
          path: target/release/bin
          if-no-files-found: error
          retention-days: 1

      - name: Prune unused packages from cache
        uses: actions-rs/cargo@v1
        with:
          command: cache
          args: clean-unref

      - name: Stop sccache server
        run: sccache --stop-server || true

  build-docker:
    name: Build docker image
    needs: [ build-backend ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Download backend
        uses: actions/download-artifact@v2
        with:
          name: backend
          path: target/release/

      - name: Build docker image
        run: |
          docker build --tag traffic-maker -f ./docker/Dockerfile .
          docker save -o traffic-maker.tar traffic-maker

      - name: Save docker image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: traffic-maker-docker
          path: traffic-maker.tar
          if-no-files-found: error
          retention-days: 1

  push-docker:
    name: Push Docker image to ECR
    needs: [ build-docker ]
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' && github.event.inputs.deploy ||
      github.event_name == 'push'
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Download docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: traffic-maker-docker

      - name: Load node docker image
        run: docker load -i traffic-maker.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: 573243519133.dkr.ecr.us-east-1.amazonaws.com
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}

      - name: Push traffic-maker image to the private registry
        env:
          LOCAL_IMAGE: traffic-maker
          IMAGE_TAG: $(git rev-parse --short HEAD)
          TRAFFIC_MAKER_REGISTRY: 573243519133.dkr.ecr.us-east-1.amazonaws.com/traffic-maker
        run: |
          docker tag ${{ env.LOCAL_IMAGE }} ${{ env.TRAFFIC_MAKER_REGISTRY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.TRAFFIC_MAKER_REGISTRY }}:${{ env.IMAGE_TAG }}
