name: Build frontend artifacts

on:
  pull_request:
  workflow_dispatch:
    inputs:
      deploy:
        description: Whether to perform deployment step
        required: false
        type: boolean
      api-address:
        description: The address where backend stats are being exposed (`STATS_BASE_URL`)
        required: false
        type: string
        default: http://localhost:8080
      api-address-devnet:
        description: Same as api-address - but for devnet
        required: false
        type: string
        default: https://traffic-maker.dev.azero.dev
      api-address-testnet:
        description: Same as api-address - but for testnet
        required: false
        type: string
        default: https://traffic-maker.test.azero.dev
  push:
    branches: [ main ]
    paths:
      - 'monitoring/**'
      - '.github/workflows/build-and-push-frontend-docker.yml'
      - 'docker/frontend/**'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build-frontend:
    name: Build and upload frontend static content
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 0
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
    strategy:
      matrix:
        monitoring_env: ["default", "devnet", "testnet"]
        include:
          - api_address: ${{ github.event.inputs.api-address }}
            path: monitoring/dist
            content: frontend
            monitoring_env: default
          - api_address: ${{ github.event.inputs.api-address-devnet }}
            path: monitoring/dist-devnet
            content: frontend-devnet
            monitoring_env: devnet
          - api_address: ${{ github.event.inputs.api-address-testnet }}
            path: monitoring/dist-testnet
            content: frontend-testnet
            monitoring_env: testnet
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          override: true

      - name: Install WASM target
        run: rustup target add wasm32-unknown-unknown

      - name: Restore cache
        uses: ./.github/actions/rust-cache
        with:
          target_key: frontend
          cache_version: v1

      - name: Build frontend
        env:
          STATS_BASE_URL: ${{ matrix.api_address }}
        run: |
          cd monitoring/
          wget -qO- https://github.com/thedodd/trunk/releases/download/v0.15.0/trunk-x86_64-unknown-linux-gnu.tar.gz | tar -xzf-
          ./trunk build --release

      - name: Cleanup cache
        uses: ./.github/actions/rust-cache-post

      - name: Upload static content
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.content }}
          path: ${{ matrix.path }}
          if-no-files-found: error
          retention-days: 1

  build-docker:
    name: Build frontend docker image
    needs: [ build-frontend ]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        monitoring_env: ["default", "devnet", "testnet"]
        include:
          - path: monitoring/dist
            content: frontend
            monitoring_env: default
          - path: monitoring/dist-devnet
            content: frontend-devnet
            monitoring_env: devnet
          - path: monitoring/dist-testnet
            content: frontend-testnet
            monitoring_env: testnet
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Download static content
        uses: actions/download-artifact@v2
        with:
          name: ${{ matrix.content }}
          path: ${{ matrix.path }}

      - name: Build docker image
        run: |
          docker build --tag traffic-maker-monitoring -f ./docker/frontend/Dockerfile .
          docker save -o traffic-maker-monitoring.tar traffic-maker-monitoring

      - name: Save docker image as artifact
        uses: actions/upload-artifact@v2
        with:
          name: traffic-maker-monitoring-docker
          path: traffic-maker-monitoring.tar
          if-no-files-found: error
          retention-days: 1

  push-docker:
    name: Push Docker image to ECR
    needs: [ build-docker ]
    runs-on: ubuntu-latest
    if: >
      github.event_name == 'workflow_dispatch' && github.event.inputs.deploy ||
      github.event_name == 'push'
    steps:
      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Download docker image artifact
        uses: actions/download-artifact@v2
        with:
          name: traffic-maker-monitoring-docker

      - name: Load node docker image
        run: docker load -i traffic-maker-monitoring.tar

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to ECR
        uses: docker/login-action@v1
        with:
          registry: 573243519133.dkr.ecr.us-east-1.amazonaws.com
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}

      - name: Push traffic-maker image to the private registry
        env:
          LOCAL_IMAGE: traffic-maker-monitoring
          IMAGE_TAG: $(git rev-parse --short HEAD)
          MONITORING_REGISTRY: 573243519133.dkr.ecr.us-east-1.amazonaws.com/traffic-maker-monitoring
        run: |
          docker tag ${{ env.LOCAL_IMAGE }} ${{ env.MONITORING_REGISTRY }}:${{ env.IMAGE_TAG }}
          docker push ${{ env.MONITORING_REGISTRY }}:${{ env.IMAGE_TAG }}
